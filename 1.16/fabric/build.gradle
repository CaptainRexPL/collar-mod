
apply plugin: 'com.github.johnrengelman.shadow'


archivesBaseName = project.archives_base_name + '-' + project.property('minecraft_version')
version = rootProject.version
group = project.maven_group

architectury{
    platformSetupLoomIde() //setup a run client button for IntelliJ and VSCode
    fabric() //No, this is not a forge mod
}
repositories {
    mavenLocal()
}

configurations {
    compileModule //We'll need to shadow the whole stuff together
}

dependencies {
    implementation project(':plastic-api')
    implementation project(':common')
    implementation (project(path: ":${project.module_name}:glue"))

    developmentFabric(project(path: ":${project.module_name}:glue")) { transitive = false }
    //developmentFabric(project(path: ":something")) { transitive = false } //Use this is a module contains ANY mod resources.
    compileModule project(':plastic-api')
    compileModule project(':common')
    compileModule (project(path: ":${project.module_name}:glue", configuration: "transformProductionFabric")){
        transitive = false;
    }


    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    implementation group: 'org.joml', name: 'joml', version: '1.10.1'

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
shadowJar{
    configurations = [project.configurations.compileModule]
    classifier "fabric-dev"
}
remapJar{
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "fabric"
}
jar {
    from "LICENSE"
}